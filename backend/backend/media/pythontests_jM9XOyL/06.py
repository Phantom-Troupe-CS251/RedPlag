import v class v (): def __ v __( v , v , v , v , v ): v . v = v ( v ) v . v =( v , v , v ) v . v _ v =[ v ( v ) for v in v . v ] v . v _ v =[ v ( v ) for v in v . v ] def __ v __( v ): v ="("+', '. v ( v . v )+")" v ="("+', '. v ([ v ( v ) for v in v . v _ v ])+")" return " v : "+ v +" v : "+ v def v ( v , v ): for v in v ( 0 , v ( v . v _ v )): if ( v . v _ v [ v ]> v . v _ v [ v ]): return True elif ( v . v _ v [ v ]< v . v _ v [ v ]): return False return False def __ v __( v , v ): if ( v . v ( v )): v = v ([( v - v )*( v - v ) for v , v in v ( v . v _ v , v . v _ v )]) return v else : return - 1 v = v (). v (' - ', 1 ) v = v [ 0 ]. v (',') v = v [ 1 ]. v ('/') v . v () v _ v = v (* v , v ) v = v ( v ()) v = v _ v v _ v =- 1 v =[] for v in v ( 0 , v ): v = v () v . v ( v ) for v in v : v = v . v (' - ', 1 ) v = v [ 0 ]. v (',') v = v [ 1 ]. v ('/') v . v () v _ v = v (* v , v ) v ( v _ v ) v _ v = v _ v - v _ v if ( v _ v ==- 1 ): v _ v = v _ v v = v _ v elif ( v _ v < v _ v and v _ v >= 0 ): v _ v = v _ v v = v _ v if ( v _ v ==- 1 ): v (" v ' v v v v v ") else : v (" v v is :") v ( v ) 