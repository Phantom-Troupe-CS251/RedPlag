#include<bits/stdc++.h>
using namespace std;
 
#define ios ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
 
typedef long long int ll ;
typedef vector<int> vi ;
typedef queue<int> qi ;
typedef vector<vector<int>> vvi ;
typedef vector<bool> vb ;
typedef vector<double> vd ;
typedef vector<vector<char>> vvc ;
typedef vector<char> vc ;
typedef pair<int,int> pii ;
typedef vector<ll> vll ;
typedef stack<int> si ;
 
int lim = 100000+100 ;
int mod = 1000000000+7 ;
int inf = 1000000000 ;
ll M=1000000000000000000+10000000 ;
 
void dfs(int v,vb &visited,vvi &path,vi &parent) {
    visited[v]=1 ;
    for (auto u:path[v]) {
        if (!visited[u]) {
            parent[u]=v ;
            dfs(u,visited,path,parent) ;
        }
    }
}
 
void countfn(int v,vvi &path,vll &c,vb &counted,vi &p,vi &parent) {
    counted[v]=1 ;
    c[v]=p[v] ;
    ll sum=0 ;
    for (auto u:path[v]) {
        if (u!=parent[v]) {
            if (!counted[u]) {
                countfn(u,path,c,counted,p,parent) ;
            }
            sum+=c[u] ;
        }
    }
    c[v]+=sum ;
}
 
int main() {
    int t ;
    cin >> t ;
    while(t--) {
        int n , m ;
        cin >> n >> m ;
        vvi path(n+1) ;
        vi p(n+1) ;
        vi h(n+1) ;
        vb visited(n+1) ;
        vi parent(n+1) ;
        vll c(n+1) ;
        vb counted(n+1) ;
        for (int i=1;i<=n;i++) {
            cin >> p[i] ;
        }
        for (int i=1;i<=n;i++) {
            cin >> h[i] ;
        }
        for (int i=1;i<=n-1;i++) {
            int x , y ;
            cin >> x >> y ;
            path[x].push_back(y) ;
            path[y].push_back(x) ;
        }
        parent[1]=0 ;
        dfs(1,visited,path,parent) ;
        for (int i=2;i<=n;i++) {
            if (path[i].size()==1) {
                c[i]=p[i] ;
                counted[i]=1 ;
            }
        }
        countfn(1,path,c,counted,p,parent) ;
//        for (ll i:c) {
//            cout << i << " " ;
//        }
        bool p1=1 ;
        vll g(n+1) ;
        for (int i=1;i<=n;i++) {
            if ((c[i]+h[i])%2!=0) p1=0 ;
            g[i]=(c[i]+h[i])/2 ;
        }
        for (int i=1;i<=n;i++) {
            ll sum=0 ;
            for (int u:path[i]) {
                if (u!=parent[i]) {
                    sum+=g[u] ;
                }
            }
//            cout << sum << " " ;
            if (!(g[i]>=sum && g[i]>=0 && g[i]<=c[i])) {
                p1=0 ;
            }
        }
        if (p1) cout << "YES" << endl ;
        else cout << "NO" << endl ;
    }
}